#!/usr/bin/env ruby
require 'singleton'
require 'optparse'

# Parse command line options
class Options
  include Singleton

  DESCRIPTION = 'Advent of Code runner for ruby'.freeze
  HEAD = 'Usage: aoc <day> <part> [options]'.freeze

  def initialize
    @options = {}
    OptionParser.new do |parser|
      parser.banner = [
        DESCRIPTION,
        '',
        HEAD,
        '',
        "#{parser.summary_indent}<day> is the day to run (01 - 25)",
        "#{parser.summary_indent}<part> is the part to run (1 or 2)",
        '',
        'Options:'
      ].join("\n")

      parser.on('-y', '--year [YEAR]', 'Year to run')
      parser.on('-h', '--help', 'Displays Help') do
        puts parser
        exit
      end
    end.parse!(into: @options)
  end

  def [](key)
    @options[key]
  end
end

def load_challenge(day, year)
  unless Dir.exist?(year.to_s)
    puts "The directory for year #{year} does not exist."
    exit 1
  end
  require_relative "#{year}/#{day}"
  Object.const_get("Day#{day}")
rescue LoadError
  puts "The file for day #{day} does not exist in #{year}/"
  exit 1
rescue NameError
  puts "The class for day #{day} does not exist in #{year}/#{day}.rb, double check the class name."
  exit 1
end

def execute_solution(day, year)
  klass = load_challenge(day, year)

  klass.new.solution
end

# have to do this before we call ARGV
Options.instance

if ARGV.empty?
  puts Options::HEAD
  exit 1
end

day = ARGV[0]
year = Options.instance[:year] || Time.now.year

puts execute_solution(day, year)
